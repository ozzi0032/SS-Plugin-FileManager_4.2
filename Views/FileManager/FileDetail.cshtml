@using Newtonsoft.Json;
@using BizSol.FileManager.Models;
@model BizSol.FileManager.Models.MediaDicViewModel

@{
    Html.AddCssFileParts("~/Plugins/BizSol.FileManager/Content/css/selectize.css",
         "~/Plugins/BizSol.FileManager/Content/CodeMirror/codemirror.min.css",
         "~/Plugins/BizSol.FileManager/Content/CodeMirror/theme/eclipse.min.css",
         "~/Plugins/BizSol.FileManager/Content/css/dropzone.min.css");

    Html.AddScriptParts(
        //"~/Plugins/BizSol.FileManager/Content/js/jquery-migrate-3.0.0.min.js",
        "~/Plugins/BizSol.FileManager/Content/js/fontawesome.min.js",
        "~/Plugins/BizSol.FileManager/Content/js/selectize.min.js",
        "~/Plugins/BizSol.FileManager/Content/CodeMirror/codemirror.min.js",
        "~/Plugins/BizSol.FileManager/Content/CodeMirror/mode/javascript/javascript.min.js",
        "~/Plugins/BizSol.FileManager/Content/js/dropzone.min.js");
}

@{
    ViewBag.Title = "FileDetail";
    Layout = "_Layout";
    var codeSnippets = ViewData["snippets"] as List<string>;
}

<div class="row">
    <div class="col-md-3">
        <h4>File Details</h4>
    </div>
    <div class="col-md-9 text-right">
        <button type="button" class="btn btn-primary btn-sm" name="edit-button" id="edit-button">
            Edit
        </button>
    </div>
</div>

<div class="row">
    <label class="col-md-3 col-form-label">Tags</label>
    <div class="col-md-9">
        <select multiple id="tags" class="noskin demo-default"></select>
    </div>
</div>

@using (Html.BeginForm("FileDetail", "FileManager", FormMethod.Post, new { @class = "form-horizontal", id = "editFile-form", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(model => model.HeaderId)
    @Html.HiddenFor(model => model.CustomerId)
    @Html.HiddenFor(model => model.MediaFiles)
    <div class="row">
        @Html.LabelFor(model => model.Title, new { @class = "col-md-3 col-form-label", @for = "Title" })
        <div class="col-md-9">
            @Html.TextBoxFor(model => model.Title, new { @class = "form-control", @disabled = "true" })
            <span id="titleError" class="text-danger"></span>
        </div>
    </div>

    <div class="row">
        @Html.LabelFor(model => model.Description, new { @class = "col-md-3 col-form-label", @for = "Description" })
        <div class="col-md-9">
            @Html.TextBoxFor(model => model.Description, new { @class = "form-control", @disabled = "true" })
            <span id="descError" class="text-danger"></span>
        </div>
    </div>

    <div class="row">
        <div class="card" style="width:50%; margin:10px 10px">
            <div class="card-header">
                Files
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">
                    @foreach (var file in Model.MediaFiles)
                    {
                        <div class="row">
                            <div class="col-md-8">
                                <i class="far fa-file-code col-sm-1" style="font-size:20px"></i>
                                <a class="col-sm-6" href="DownloadFile?id=@file.FileId" title="Download">@file.FileName</a>
                                <a href="DeleteFile?id=@file.FileId" class="delete-icon" title="Delete">
                                    <i class="fa fa-trash-o col-sm-1" style="font-size:20px">
                                    </i>
                                </a>
                            </div>
                        </div>
                    }
                </li>
            </ul>
        </div>

        <div class="dropzone dz-message dz-clickable dropzone-previews col-md-6" id="previewFiles">
            <div style="text-align:center">
                <i class="far fa-file-code col-sm-2" style="font-size:30px"></i>
                <h4>Drop files here or click to upload.</h4>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12" id="textboxContainer">
            @* Dynamic Edit Boxes will go here*@
        </div>
    </div>

    <div id="alert" class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Alert!</strong> You cannot change tags!.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <div class="row text-right">
        <div class="col">
            <button type="button" class="btn btn-primary btn-lg" name="save-button" id="save-button" disabled>
                Save
            </button>
        </div>
        <div class="col">
            <button type="button" class="btn btn-primary btn-lg" name="code-button" id="code-button" disabled>
                Add Code Snippet
            </button>
        </div>
    </div>
}
<script type="text/javascript">
    let count = 0;
    let addedFiles = [];
    let editorsList = [];
    $(document).ready(function () {
        Dropzone.autoDiscover = false;
        $("#alert").hide();

        var tags = JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(Model.MediaTags)))');
        var snippetsArray = JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(codeSnippets)))');

        $("#editFile-form").dropzone({
            url: "/Plugins/BSFileManager/UploadFile",
            paramName: "files",
            maxFilesize: 20, // MB,
            uploadMultiple: true,
            autoQueue: true,
            addRemoveLinks: true,
            dictResponseError: 'Server not Configured',
            previewsContainer: "#previewFiles",
            init: function () {
                var self = this;
                // config
                self.options.addRemoveLinks = true;
                self.options.dictRemoveFile = "Delete File";

                self.on("successmultiple", function (fileList,response) {
                    var result = JSON.parse(response);
                    result.forEach(function (value, index, _) {
                        addedFiles.push(value);
                    });
                });

                self.on("removedfile", function (file) {
                    var _file = addedFiles.find(item => item.FileName == file.name);
                    var index = addedFiles.indexOf(_file);
                    var path = _file.FilePath;
                    $.ajax({
                        url: '/Plugins/BSFileManager/RemoveUploadedFile?path='+ path,
                        type: 'GET',
                        dataType: 'json',
                        error: function () {
                        },
                        success: function (res) {
                            debugger
                            addedFiles.splice(index, 1); // Remove the file from list of files also *Second Parameter means remove one item only
                            alert(res);
                        }
                    });
                 });
            }
        });

        // Selectize MultiSelect
        var select = $("#tags").selectize({
            create: true,
            persist: true,
            preload: false, // if true, load func will be called upon initialization
            valueField: 'Id',
            labelField: 'Name',
            sortField: 'Name',
            searchField: ['Name'],
            placeholder: 'Select tags',
            plugins: ['remove_button'],
            options: tags,
            create: function (input) {
                $.ajax({
                    type: "POST",
                    url: "/Plugins/BSFileManager/CreateTag?name=" + input,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (_) {
                        alert("New tag added!");
                    }
                });
            }
        });
        var tagsInput = select[0].selectize;
        tagsInput.load(function (callback) {
            $.ajax({
                url: '/Plugins/BSFileManager/TagList',
                type: 'GET',
                dataType: 'json',
                error: function () {
                    callback();
                },
                success: function (res) {
                    callback(res);
                }
            });
            tagsInput.setValue(tags.map(function (item) { return item.Id } ));
        });
        tagsInput.disable();

        tagsInput.on('focus', function () {
            $("#alert").show();
        });

        // Create Code Editors
        if (snippetsArray.length > 0) {
            for (var i = 0; i < snippetsArray.length; i++) {
                AddCodeBlock(snippetsArray[i]);
            }
        }
    });

    function AddCodeBlock(codeSnippet) {
        count++;
        var div = $("<div class = 'row'><div />");
        var label = $('<label class = "col-md-3 col-form-label">Code Snippet:' + count + '<label />');
        div.append(label);
        div.append(GetTextBox());
        $("#textboxContainer").append(div);

        var editor = CodeMirror.fromTextArea(document.getElementsByName("DynamicTextBox")[count - 1], {
            mode: "javascript",
            lineNumbers: true,
            lineWrap: false,
            viewportMargin: Infinity
        });
        editor.setSize("100%", null);
        if (codeSnippet !== undefined) {
            editor.setValue(codeSnippet); // Fill Editor with code snippets
        }
        editorsList.push(editor);
    }

    function GetTextBox() {
        return '<textarea name = "DynamicTextBox"/>';
    }

    // Edit Button OnClick
    $(document).on("click", "#edit-button", function () {
        // Enable controls
        $(".form-control").each(function (_, obj) {
            obj.disabled = false;
        });

        // Enable Add Code Snippet Button
        $("#code-button").removeAttr("disabled");

        // Enable Save Button
        $("#save-button").removeAttr("disabled");
    });

    // Add Code Snippet Button OnClick
    $(document).on("click", "#code-button", function () {
        AddCodeBlock();
    });

    // Save Button OnClick
    $(document).on("click", "#save-button", function () {
        // Get Values of CodeMirrors created
        var codeSnippets = [];
        $(".CodeMirror").each(function (i, obj) {
            codeSnippets.push(editorsList[i].getValue());
        });

        var mediaTags = JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(Model.MediaTags)))');
        var mediaFiles = JSON.parse('@Html.Raw(HttpUtility.JavaScriptStringEncode(JsonConvert.SerializeObject(Model.MediaFiles)))');

        // Add uploaded file to the MediaFiles List -> MediaFiles is containing existing files in the record
        addedFiles.forEach(function (value, _, __) {
            mediaFiles.push(value);
        });

        // Creating MediaDic View Model
        var mediaDicVMObj = {
            HeaderId: '@Model.HeaderId',
            CustomerId: '@Model.CustomerId',
            Title: $("#Title").val(),
            Description: $("#Description").val(),
            CRC: "CRC",
            CodeSnippet: JSON.stringify(codeSnippets),
            TagString: '@Model.TagString',
            CreatedOnUtc:'@Model.CreatedOnUtc',
            UpdatedOnUtc: '@Model.UpdatedOnUtc',
            MediaTags: mediaTags,
            MediaFiles: mediaFiles,
        };
        var mediaDicVMMain = {
            mediaDicVM: mediaDicVMObj,
        };

        if (Validate()) {
            $.ajax({
                type: "POST",
                url: "/Plugins/BSFileManager/FileDetail",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(mediaDicVMMain),
                success: function (response) {
                    alert("File Saved Successfully!");
                    location.reload(false);
                }
            });
        }
    });

    function Validate() {
        $("#titleError").text("");
        $("#descError").text("");
        var validationMessage = "Field is required!";
        if ($("#Title").val() == "" || $("#Title").val().length < 1) {
            $("#titleError").text(validationMessage);
        }

        if ($("#Description").val() == "" || $("#Description").val().length < 1) {
            $("#descError").text(validationMessage);
        }

        else {

            if ($("#Title").val().length != 0 &&
                $("#Description").val().length != 0) {
                return true;
            }

        }

        return false;
    }

</script>
<style>
    .row {
        margin-top: 8px;
    }

        .row.text-right {
            margin-top: 8px;
        }

    .CodeMirror {
        height: auto;
        min-height: 200px;
        border: 1px solid #eee;
    }

    .card {
        margin-top: 8px;
    }

    .dropzone {
        background: white;
        border-radius: 5px;
        border: 2px dashed #eee;
        border-image: none;
        max-width: 500px;
        max-height: auto;
        margin-left: auto;
        margin-right: auto;
        margin-top: inherit;
    }
</style>
